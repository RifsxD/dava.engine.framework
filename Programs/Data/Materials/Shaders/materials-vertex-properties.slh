#if !defined(COMMON_INCLUDED)
#error "Include common.slh"
#endif

[auto][a] property float4x4 worldMatrix;
[auto][a] property float4x4 viewProjMatrix;
[auto][a] property float globalTime;

#if VERTEX_DISTORTION && VERTEX_SHADER_TEXTURE_FETCH_SUPPORTED
    uniform sampler2D vertexDistortionNoise; // Put a different perlin noise into each of rgb channels.
    [material][a] property float vertexDistortionScale = 0.0f;
    [material][a] property float2 vertexDistortionVariationSpeed;
    [material][a] property float3 vertexDistortionWindVector;
#endif

#if WIND_ANIMATION
    [auto][a] property float2 trunkOscillationParams;
#endif

#if SOFT_SKINNING || HARD_SKINNING
    [auto][jpos] property float4 jointPositions[MAX_JOINTS] : "bigarray" ; // (x, y, z, scale)
    [auto][jrot] property float4 jointQuaternions[MAX_JOINTS] : "bigarray";
#endif

#if ALBEDO_TRANSFORM
    [material][a] property widget textureTransform float4x4 Tex0Transform;
    [material][a] property float4 decalAtlasBoxAlbedo = float4(0.0, 0.0, 1.0, 1.0);
#endif

#if TILED_DECAL_MASK && !DRAW_DEPTH_ONLY
    [material][a] property float2 decalTileCoordScale = float2(1.0, 1.0);
    #if TILED_DECAL_TRANSFORM
        #if HARD_SKINNING
            #define VEC4_PER_MATRIX3 2
            #define JOINT_TEXTURE_TRANSFORMS_SIZE 64 // MAX_JOINT * VEC4_PER_MATRIX3
            [auto][ttc] property widget textureTransform float4 jointTextureTransforms[JOINT_TEXTURE_TRANSFORMS_SIZE] :  "bigarray";
        #elif !SOFT_SKINNING
            [material][a] property widget textureTransform float4x4 tiledDecalTextureTransform;
        #endif
    #endif
#endif


// Force inline functions that use `jointPositions` or `jointQuaternions`
// it's necessary for this code to compile under Metal

#if SOFT_SKINNING
inline float3 JointTransformTangent(float3 tangent, float4 quaternion, float jWeight)
{
    float3 tmp = 2.0 * cross(quaternion.xyz, tangent);
    return tangent + (quaternion.w * tmp + cross(quaternion.xyz, tmp)) * jWeight;
}

__forceinline float4 SoftSkinnedPosition(float3 position, float4 indices, float4 weights)
{
    float4 skinnedPosition = float4(0.0, 0.0, 0.0, 0.0);

    for(int i = 0; i < SOFT_SKINNING; ++i)
    {
        int jIndex = int(indices.x);

        float4 jP = jointPositions[jIndex];
        float4 jQ = jointQuaternions[jIndex];
    
        float3 tmp = 2.0 * cross(jQ.xyz, position);
        skinnedPosition += float4(jP.xyz + (position + jQ.w * tmp + cross(jQ.xyz, tmp)) * jP.w, 1.0) * weights.x;
        
        indices = indices.yzwx;
        weights = weights.yzwx;
    }

    return skinnedPosition;
}

__forceinline float3x3 SoftSkinnedTBN(float3 t, float3 b, float3 n, float4 indices, float4 weights)
{
    for(int i = 0; i < SOFT_SKINNING; ++i)
    {
        float4 jointQuaternion = jointQuaternions[int(indices.x)];

        t = JointTransformTangent(t, jointQuaternion, weights.x);
        b = JointTransformTangent(b, jointQuaternion, weights.x);
        n = JointTransformTangent(n, jointQuaternion, weights.x);

        indices = indices.yzwx;
        weights = weights.yzwx;
    }

    return float3x3(t, b, n);
}

#elif HARD_SKINNING
inline float3 JointTransformTangent(float3 tangent, float4 quaternion)
{
    float3 tmp = 2.0 * cross(quaternion.xyz, tangent);
    return tangent + quaternion.w * tmp + cross(quaternion.xyz, tmp);
}

__forceinline float4 HardSkinnedPosition(float3 position, float index)
{
    float4 skinnedPosition = float4(0.0, 0.0, 0.0, 0.0);
    int jIndex = int(index);
    
    float4 jP = jointPositions[jIndex];
    float4 jQ = jointQuaternions[jIndex];

    float3 tmp = 2.0 * cross(jQ.xyz, position);
    skinnedPosition = float4(jP.xyz + (position + jQ.w * tmp + cross(jQ.xyz, tmp)) * jP.w, 1.0);
    return skinnedPosition;
}

__forceinline float3x3 HardSkinnedTBN(float3 t, float3 b, float3 n, float index)
{
    float4 jointQuaternion = jointQuaternions[int(index)];

    t = JointTransformTangent(t, jointQuaternion);
    b = JointTransformTangent(b, jointQuaternion);
    n = JointTransformTangent(n, jointQuaternion);

    return float3x3(t, b, n);
}

#endif

#if WAVE_ANIMATION
inline float4 Wave(float time, float4 pos, float2 uv)
{
    float4 off;
    float sinOff = pos.x + pos.y + pos.z;
    float t = -time * 3.0;
    float cos1 = cos(t * 1.45 + sinOff);
    float cos2 = cos(t * 3.12 + sinOff);
    float cos3 = cos(t * 2.2 + sinOff);
    float fx = uv.x;
    float fy = uv.x * uv.y;

    off.y = pos.y + cos2 * fx * 0.5 - fy * 0.9;
    off.x = pos.x + cos1 * fx * 0.5;
    off.z = pos.z + cos3 * fx * 0.5;
    off.w = pos.w;

    return off;
}
#endif