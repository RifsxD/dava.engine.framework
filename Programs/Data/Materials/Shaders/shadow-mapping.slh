#if !defined(COMMON_INCLUDED)
#error "Include common.slh"
#endif

#if SHADOW_TRIO_LAYOUT
    uniform sampler2DShadow dynamicShadowMapTrioLayout;
#else
    uniform sampler2DShadow dynamicShadowMapLow;
#endif
uniform sampler2D noiseTexture64x64;

[auto][a] property float4x4 shadowViewMatrix;
[auto][a] property float2 viewportSize;

[auto][a] property float4 shadowConstantDepthBias;
[auto][a] property float4 shadowSlopeDepthBias;
[auto][a] property float shadowNormalSlopeOffset;
[auto][a] property float4 shadowFilterRadius;

[auto][a] property float2 shadowMapSize;
[auto][a] property float4 shadowMapShadowColor;
[auto][a] property float4x4 shadowMapProjectionScale;
[auto][a] property float4x4 shadowMapProjectionOffset;
[auto][a] property float2 shadowBlendCascadesOut;
[auto][a] property float2 shadowCutoffSlope;
[auto][a] property float shadowLitNormalScale;
[auto][a] property float3 shadowLitDiffuseSpecAmbientMult;
[auto][a] property float2 shadowLMGateFactor;

float ComputeCascadesBlendValue(float3 lvs, float3 scale, float3 offset, float4 projCascadeRangeIn, float blendSizeIn)
{
    float3 c0 = float3(float3(projCascadeRangeIn.x, projCascadeRangeIn.w, 1.0) - offset) / scale;
    float3 c1 = float3(float3(projCascadeRangeIn.y, projCascadeRangeIn.z, 0.0) - offset) / scale;
    float3 center = 0.5 * (c0 + c1);
    float3 size = 0.5 * (c1 - c0);

    float3 s = max(0.0, abs(lvs - center) - (size - blendSizeIn));
    return max(s.x, max(s.y, s.z)) / blendSizeIn;
}

inline float JitterBlend(float blendAmount, float normalizedNoiseValue)
{
    return float(blendAmount > normalizedNoiseValue);
}

__forceinline float4 getCascadedShadow(float4 worldPosIn, float4 projPosIn, float3 worldNormalIn, float NdotLIn)
{
    float slopeFactor = saturate(1.0 - NdotLIn);
    
    float3 scaledNormalOffset = worldNormalIn * shadowNormalSlopeOffset * slopeFactor;
    float4 shadowViewPos4 = mul(float4(worldPosIn.xyz + scaledNormalOffset, 1.0), shadowViewMatrix);
    
    float3 shadowViewPos = shadowViewPos4.xyz / shadowViewPos4.w;
    float2 screenSpaceCoords = (projPosIn.xy / projPosIn.w) * ndcToUvMapping.xy + ndcToUvMapping.zw;
    float2 rotationKernel = tex2D(noiseTexture64x64, screenSpaceCoords * viewportSize / 64.0).xy * 2.0 - 1.0;
    float outBlendAmount = 1.0;
    float shadow = 1.0f;
    float cascadesCountF = float(SHADOW_CASCADES_COUNT);
    float blendLM = 1.0f;

    int cascade = -1;
    int nextCascade = -1;
    float lastCascade = 0.0;

    float filterSizeUv = shadowFilterRadius.x / shadowMapSize.x;
    float3 minCoord = float3(filterSizeUv, filterSizeUv, ndcToZMappingOffset * 2.0 - 2.0); /* 0.5 on GL -> -1.0, 1.0 on other API -> 0.0 */
    #if SHADOW_TRIO_LAYOUT
        float3 maxCoord = float3(1.0 - minCoord.x, 2.0f / 3.0f - minCoord.y, 1.0);
    #else
        float3 maxCoord = float3(1.0 - minCoord.x, 1.0 / cascadesCountF - minCoord.y, 1.0);
    #endif
    
    float3 c0 = shadowViewPos * shadowMapProjectionScale[0].xyz + shadowMapProjectionOffset[0].xyz;
    bool cascade0 = all(equal(clamp(c0, minCoord, maxCoord), c0));
    
    #if SHADOW_TRIO_LAYOUT
        maxCoord = float3(0.5 - minCoord.x, 1.0f / 3.0f - minCoord.y, 1.0);
    #endif
    #if SHADOW_CASCADES_COUNT > 1
        float3 c1 = shadowViewPos * shadowMapProjectionScale[1].xyz + shadowMapProjectionOffset[1].xyz;
        #if SHADOW_TRIO_LAYOUT
            c1.y -= 2.0f / 3.0f;
        #else
            c1.y -= 1.0 / cascadesCountF;
        #endif
        bool cascade1 = all(equal(clamp(c1, minCoord, maxCoord), c1));
    #endif
    #if SHADOW_CASCADES_COUNT > 2
        float3 c2 = shadowViewPos * shadowMapProjectionScale[2].xyz + shadowMapProjectionOffset[2].xyz;
        #if SHADOW_TRIO_LAYOUT
            c2.x -= 1.0f / 2.0f;
            c2.y -= 2.0f / 3.0f;
        #else
            c2.y -= 2.0 / cascadesCountF;
        #endif
        bool cascade2 = all(equal(clamp(c2, minCoord, maxCoord), c2));
    #endif
    #if SHADOW_CASCADES_COUNT > 3
        float3 c3 = shadowViewPos * shadowMapProjectionScale[3].xyz + shadowMapProjectionOffset[3].xyz;
        c3.y -= 3.0 / cascadesCountF;
        bool cascade3 = all(equal(clamp(c3, minCoord, maxCoord), c3));
    #endif

    if (cascade0)
    {
        cascade = 0;
        nextCascade = 0;
        #if SHADOW_CASCADES_COUNT > 1
            if (cascade1) {
                nextCascade = 1;
            }
            #if SHADOW_CASCADES_COUNT > 2
            else if (cascade2)
            {
                nextCascade = 2;
            }
            #if SHADOW_CASCADES_COUNT > 3
            else if (cascade3)
            {
                nextCascade = 3;
            }
            #endif
            #endif
        #else
            lastCascade = 1.0;
        #endif
    }
    #if SHADOW_CASCADES_COUNT > 1
    else if (cascade1) // to reduce jitterBlend artefacts apply same nextCascade Logic as for cascade0
    {
        cascade = 1;
        #if SHADOW_CASCADES_COUNT > 2
            nextCascade = 2;
        #else
            nextCascade = 1;
            lastCascade = 1.0;
        #endif
    }
    #if SHADOW_CASCADES_COUNT > 2
    else if (cascade2)
    {
        cascade = 2;

        #if SHADOW_CASCADES_COUNT > 3
            nextCascade = 3;
        #else
            nextCascade = 2;
            lastCascade = 1.0;
        #endif
    }
    #if SHADOW_CASCADES_COUNT > 3
    else if (cascade3)
    {
        cascade = 3;
        nextCascade = 3;
        lastCascade = 1.0;
    }
    #endif
    #endif
    #endif

    float jitteredCascadesBlend;
    int jitteredCascade = -1;
    if (cascade >= 0)
    {
        shadow = 0.0f;
        float3 currentProjScale = shadowMapProjectionScale[cascade].xyz;
        float3 currentProjOffset = shadowMapProjectionOffset[cascade].xyz;
        float3 nextProjScale = shadowMapProjectionScale[nextCascade].xyz;
        float3 nextProjOffset = shadowMapProjectionOffset[nextCascade].xyz;

        float blendSize = lerp(shadowBlendCascadesOut.x, shadowBlendCascadesOut.y, lastCascade);

        float4 projCascadeRange;
        float cascadeF = float(cascade);
        #if SHADOW_TRIO_LAYOUT
            float thrYR = 2.0f / 3.0f;
            projCascadeRange = lerp(
                lerp(float4(0.0f, 1.0f, 0.0f, thrYR), float4(0.0f, 0.5f, thrYR, 1.0f), cascadeF),
                float4(0.5f, 1.0f, thrYR, 1.0f), max(cascadeF - 1.0, 0.0));
        #else
            projCascadeRange = float4(0.0, 1.0, cascadeF / cascadesCountF, (cascadeF + 1.0) / cascadesCountF);
        #endif
        
        float cascadesBlend;
        cascadesBlend = ComputeCascadesBlendValue(shadowViewPos, currentProjScale, currentProjOffset, projCascadeRange, blendSize);
        blendLM = lerp(0.0f, cascadesBlend, lastCascade);

        jitteredCascadesBlend = JitterBlend(cascadesBlend, rotationKernel.x * 0.5 + 0.5);

        jitteredCascade = jitteredCascadesBlend > 0.5f ? nextCascade : cascade;
        float3 po = lerp(currentProjOffset, nextProjOffset, jitteredCascadesBlend);
        float3 ps = lerp(currentProjScale, nextProjScale, jitteredCascadesBlend);
        
        shadowViewPos.z += shadowConstantDepthBias[jitteredCascade] + shadowSlopeDepthBias[jitteredCascade] * slopeFactor;
        float3 projPos = shadowViewPos * ps + po;

        #if (SHADOW_PCF > 0)
            float2 poissonDistribution[8];
            poissonDistribution[0] = float2(+0.95581, -0.18159);
            poissonDistribution[1] = float2(+0.50147, -0.35807);
            poissonDistribution[2] = float2(+0.69607, +0.35559);
            poissonDistribution[3] = float2(-0.00368, -0.59150);
            poissonDistribution[4] = float2(+0.15930, +0.08975);
            poissonDistribution[5] = float2(-0.65030, +0.05818);
            poissonDistribution[6] = float2(+0.11915, +0.78449);
            poissonDistribution[7] = float2(-0.34296, +0.51575);

            float pcfFilterSize = shadowFilterRadius[jitteredCascade];
            float cosTheta = rotationKernel.x * pcfFilterSize;
            float sinTheta = rotationKernel.y * pcfFilterSize;
            float2 r0 = float2(cosTheta, -sinTheta) / shadowMapSize.x;
            float2 r1 = float2(sinTheta, cosTheta) / shadowMapSize.y;

            for (int i = 0; i < SHADOW_PCF; ++i)
            {
                float3 projectedCoords = projPos;
                projectedCoords.x += dot(poissonDistribution[i].xy, r0);
                projectedCoords.y += dot(poissonDistribution[i].xy, r1);
                #if SHADOW_TRIO_LAYOUT
                    shadow += tex2Dcmp(dynamicShadowMapTrioLayout, projectedCoords);
                #else
                    shadow += tex2Dcmp(dynamicShadowMapLow, projectedCoords);
                #endif
            }
            shadow *= 1.0 / float(SHADOW_PCF);
        #else
            #if SHADOW_TRIO_LAYOUT
                shadow += tex2Dcmp(dynamicShadowMapTrioLayout, projPos);
            #else
                shadow += tex2Dcmp(dynamicShadowMapLow, projPos);
            #endif
        #endif

        outBlendAmount = cascadesBlend * lastCascade;
        outBlendAmount = outBlendAmount * outBlendAmount;
    }

    float slopeCutoff = 1.0 - smoothstep(shadowCutoffSlope.x, shadowCutoffSlope.y, slopeFactor);
    float shadowValue = saturate(shadow + outBlendAmount) * slopeCutoff;
    
    float activeCascadeDebug = 5.0;
    
    #if DEBUG_SHADOW_CASCADES
        bool isCascade0 = jitteredCascade == 0;
        bool isCascade1 = jitteredCascade == 1;
        bool isCascade2 = jitteredCascade == 2;
        bool isCascade3 = jitteredCascade == 3;
        if (isCascade0) { activeCascadeDebug = 0.0f; }
        else if (isCascade1) { activeCascadeDebug = 1.0f; }
        else if (isCascade2) { activeCascadeDebug = 2.0f; }
        else if (isCascade3) { activeCascadeDebug = 3.0f; }
    #endif
    
    return float4(shadowValue, activeCascadeDebug, 1.0 - blendLM, 1.0 - outBlendAmount);
}

__forceinline float3 getShadowColor(float4 shadowInfoIn)
{
    #if DEBUG_SHADOW_CASCADES
        float3 debugCascadeColor = float3(0.0, 0.0, 0.0);

        if (shadowInfoIn.y < 0.5f) { debugCascadeColor.x = 5.0; }
        else if (shadowInfoIn.y < 1.5f) { debugCascadeColor.y = 5.0; }
        else if (shadowInfoIn.y < 2.5f) { debugCascadeColor.z = 5.0; }
        else if (shadowInfoIn.y < 3.5f) { debugCascadeColor.x = 85.0; debugCascadeColor.y = 1.0; }

        debugCascadeColor *= shadowInfoIn.w;
        return debugCascadeColor;
    #else
        return lerp(shadowMapShadowColor.rgb, float3(1.0, 1.0, 1.0), shadowInfoIn.x);
    #endif
}
